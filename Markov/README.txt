In the first constructor, we had to create a Markov model of order k from the given text, assuming that text has length at least k. First I created a map of all the k-grams. Then I put the occurrence of the string into the k-gram map. And I did the same thing for k+1.

In order I return order k of the Markov model.

In the first freq function, we had to return the number of occurrences of k-grams in the text. We also had to throw an exception if k-gram is not length k.

In the second freq function, we had to check the number of times that character follows k-gram. If order = 0 it returns the number of times the character appears we had to throw an exception if k-grams is not length k.

In the gen function, it generates a string length of T characters by simulating a trajectory through the corresponding chain. The first k characters of the newly generated string should be the first argument k-gram. Then we had to throw an exception if k-gram is not of k length.

In the insertion operator, it prints out the order, alphabet, and the frequencies of the k-grams and k+1-grams.

When I was testing this program I used the examples provided by Princeton. To run the examples from Princeton use the following commands:
    ./TextGenerator int K int T < PrincetonExamples/example1.txt
    ./TextGenerator int K int T < PrincetonExamples/example2.txt
    ./TextGenerator int K int T < PrincetonExamples/example3.txt
Where K builds the Markov model and T prints out the characters generated by simulating a trajectory through the corresponding Markov chain.
